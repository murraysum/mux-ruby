=begin
#Mux API

#Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

The version of the OpenAPI document: v1
Contact: devex@mux.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for MuxRuby::PlaybackRestrictionsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PlaybackRestrictionsApi' do
  before do
    # run before each test
    @api_instance = MuxRuby::PlaybackRestrictionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PlaybackRestrictionsApi' do
    it 'should create an instance of PlaybackRestrictionsApi' do
      expect(@api_instance).to be_instance_of(MuxRuby::PlaybackRestrictionsApi)
    end
  end

  # unit tests for create_playback_restriction
  # Create a Playback Restriction
  # Create a new Playback Restriction.
  # @param create_playback_restriction_request 
  # @param [Hash] opts the optional parameters
  # @return [PlaybackRestriction]
  describe 'create_playback_restriction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_playback_restriction
  # Delete a Playback Restriction
  # Deletes a single Playback Restriction.
  # @param playback_restriction_id ID of the Playback Restriction.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_playback_restriction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_playback_restriction
  # Retrieve a Playback Restriction
  # Retrieves a Playback Restriction associated with the unique identifier.
  # @param playback_restriction_id ID of the Playback Restriction.
  # @param [Hash] opts the optional parameters
  # @return [PlaybackRestriction]
  describe 'get_playback_restriction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_playback_restrictions
  # List Playback Restrictions
  # Returns a list of all Playback Restrictions.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Offset by this many pages, of the size of &#x60;limit&#x60;
  # @option opts [Integer] :limit Number of items to include in the response
  # @return [Array<PlaybackRestriction>]
  describe 'list_playback_restrictions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_referrer_domain_restriction
  # Update the Referrer Playback Restriction
  # Allows you to modify the list of domians or change how Mux validates playback requests without the &#x60;Referer&#x60; HTTP header. The Referrer restriction fully replaces the old list with this new list of domains.
  # @param playback_restriction_id ID of the Playback Restriction.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [PlaybackRestriction]
  describe 'update_referrer_domain_restriction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
